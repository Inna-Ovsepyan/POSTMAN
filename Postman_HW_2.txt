TASK_1

http://162.55.220.72:5005/first
1. Отправить запрос.
GET, http://162.55.220.72:5005/first., save, send

2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

3. Проверить, что в body приходит правильный string.
This is the first responce from server!

pm.test("Body matches string", function () {
    pm.expect(pm.response.text()).to.include("This is the first responce from server!");
});

PASS Body matches string



TASK_2

http://162.55.220.72:5005/user_info_3
1. Отправить запрос.
POST, http://162.55.220.72:5005/user_info_3, form-data
name  inna
age  30
salary  100000


{
    "age": "30",
    "family": {
        "children": [
            [
                "Alex",
                24
            ],
            [
                "Kate",
                12
            ]
        ],
        "u_salary_1_5_year": 400000
    },
    "name": "inna",
    "salary": 100000
}

2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

3. Спарсить response body в json.
var resp_param = pm.response.json();

4. Проверить, что name в ответе равно name s request (name вбить руками.)

pm.test("name inna", function () {
    pm.expect(resp_param.name).to.eql("inna");
});
    
    PASS
name inna


5. Проверить, что age в ответе равно age s request (age вбить руками.)
pm.test("age 30", function() {
    pm.expect (resp_param.age).to.eql("30")
});

PASS
age 30


6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)
pm.test ("salary 100000", function(){
    pm.expect(resp_param.salary).to.eql(100000)
})

PASS
salary 100000


7. Спарсить request.
var req = request.data;

8. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test ("name is body", function(){
    pm.expect(resp_param.name).to.eql(req.name);
})

PASS
name is body

9. Проверить, что age в ответе равно age s request (age забрать из request.)

pm.test ("age is body", function(){
    pm.expect(resp_param.age).to.eql(req.age);

})

PASS
age is body


10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
pm.test ("salary is body", function(){
    pm.expect(resp_param.salary).to.eql(+req.salary);
})

PASS
salary is body

11. Вывести в консоль параметр family из response.
console.log(resp_param.family);

в консоли:
{children: [2], u_salary_1_5_year: 400000}


12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)
pm.test ("salary*4", function(){
    pm.expect(resp_param.family.u_salary_1_5_year).to.eql(req.salary*4);
})

PASS
salary*4


TASK_3

http://162.55.220.72:5005/object_info_3
1. Отправить запрос.
GET, http://162.55.220.72:5005/object_info_3
name  inna
age 30
salary 100000

2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});


{
    "age": "30",
    "family": {
        "children": [
            [
                "Alex",
                24
            ],
            [
                "Kate",
                12
            ]
        ],
        "pets": {
            "cat": {
                "age": 3,
                "name": "Sunny"
            },
            "dog": {
                "age": 4,
                "name": "Luky"
            }
        },
        "u_salary_1_5_year": 400000
    },
    "name": "inna",
    "salary": 100000
}
3. Спарсить response body в json.
body->tests
var resp_param = pm.response.json();

4. Спарсить request.
var req= request.url.query.toObject();

5. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test ("name is url" , function(){
    pm.expect (resp_param. name).to.eql(req.name);
})

PASS
name is url

6. Проверить, что age в ответе равно age s request (age забрать из request.)
pm.test("age is url", function(){
    pm.expect(resp_param.age).to.eql(req.age);
})
PASS
age is url

7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
pm.test("salary is url", function(){
    pm.expect(resp_param.salary).to.eql(+req.salary)
})

PASS
salary is url

8. Вывести в консоль параметр family из response.
console.log(resp_param.family);
{children: [2], pets: {…}, u_salary_1_5_year: 400000}

9. Проверить, что у параметра dog есть параметры name.
 pm.test ("dog have name",function(){
    pm.expect(resp_param.family.pets.dog).to.have.property("name");
}) 

PASS
dog have name

10. Проверить, что у параметра dog есть параметры age.
 
 pm.test("dog have age", function(){
    pm.expect(resp_param.family.pets.dog).to.have.property("age");

})

PASS
dog have age


11. Проверить, что параметр name имеет значение Luky.
pm.test("dog is name Luky", function() {
    pm.expect(resp_param.family.pets.dog.name).to.be.oneOf(["Luky"]);
})

PASS
dog is name Luky


12. Проверить, что параметр age имеет значение 4.
pm.test("dog is 4 years old", function(){
    pm.expect(resp_param.family.pets.dog.age).to.be.oneOf([4]);
})

PASS
dog is 4 years old



TASK_4

http://162.55.220.72:5005/object_info_4
1. Отправить запрос.
GET(name:inna, age:30, salary:100000)

2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});


{
    "age": 30,
    "name": "inna",
    "salary": [
        100000,
        "200000",
        "300000"
    ]
}


3. Спарсить response body в json.
body->tests
var resp_param= pm.response.json();

4. Спарсить request.
body->tests
var req= pm.request.url.query.toObject();

5. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("name is usrl", function(){
    pm.expect(resp_param.name).to.eql(req.name);
})

PASS
name is usrl

6. Проверить, что age в ответе равно age из request (age забрать из request.)
pm.test("age is url", function(){
    pm.expect(resp_param.age).to.eql(+req.age);
})

PASS
age is url

7. Вывести в консоль параметр salary из request.
console.log(resp_param.salary);
[100000, "200000", "300000"]

8. Вывести в консоль параметр salary из response.
console.log(req.salary);
100000

9. Вывести в консоль 0-й элемент параметра salary из response.
console.log(resp_param.salary[0]);
100000

10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.
console.log(resp_param.salary[1]);
"200000"

11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.
console.log(resp_param.salary[2]);
"300000"

12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)
pm.test("param salary_1", function(){
    pm.expect(resp_param.salary[0]).to.eql(+req.salary);
})

PASS
param salary_1

13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)
pm.test("param salary_2", function(){
    pm.expect(+resp_param.salary[1]).to.eql(req.salary*2);
})

PASS
param salary_2

14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)
pm.test("param salary_2", function(){
    pm.expect(+resp_param.salary[2]).to.eql(req.salary*3);
})
PASS
param salary_2

15. Создать в окружении переменную name
Environment-> New Environment "HW_2_Task_4"
Variable- name
Current value- inna
Save

16. Создать в окружении переменную age
Variable- age
Current value- 30
Save

17. Создать в окружении переменную salary
Variable- salary
Current value- 100000
Save


18. Передать в окружение переменную name
pm.environment.set("name", resp_param.name);

19. Передать в окружение переменную age
pm.environment.set("age", resp_param.age);

20. Передать в окружение переменную salary
pm.environment.set("salary", resp_param.salary[0]);

21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.
for(var i = 0; i < resp_param.salary.length; i++) {
  console.log("cycle_salary", resp_param.salary[i]);
};
 
cycle_salary
100000
 
cycle_salary
200000
 
cycle_salary
300000


TASK_5

http://162.55.220.72:5005/user_info_2
1. Вставить параметр salary из окружения в request
post->body, form-data-> "salary":{{salary}}

2. Вставить параметр age из окружения в age
post->body, form-data-> "age":{{age}}

3. Вставить параметр name из окружения в name
post->body, form-data-> "name":{{name}}

4. Отправить запрос.

5. Статус код 200

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

PASS
Status code is 200

{
    "person": {
        "u_age": 30,
        "u_name": [
            "inna",
            100000,
            30
        ],
        "u_salary_5_years": 420000.0
    },
    "qa_salary_after_1.5_year": 330000.0,
    "qa_salary_after_12_months": 270000.0,
    "qa_salary_after_3.5_years": 380000.0,
    "qa_salary_after_6_months": 200000,
    "start_qa_salary": 100000

6. Спарсить response body в json.
var resp_param = pm.response.json();

7. Спарсить request.
var req= request.data;

8. Проверить, что json response имеет параметр start_qa_salary
pm.test("response_ start_qa_salary", function(){
    pm.expect(resp_param).to.have.property( "start_qa_salary");
})

PASS
response_ start_qa_salary

9. Проверить, что json response имеет параметр qa_salary_after_6_months
pm.test("response_ qa_salary_after_6_months", function(){
    pm.expect(resp_param).to.have.property( "qa_salary_after_6_months");
})

PASS
response_qa_salary_after_6_months


10. Проверить, что json response имеет параметр qa_salary_after_12_months
pm.test("response_qa_salary_after_12_months", function(){
    pm.expect(resp_param).to.have.property( "qa_salary_after_12_months");
})

PASS
response_qa_salary_after_12_months


11. Проверить, что json response имеет параметр qa_salary_after_1.5_year
pm.test("response_qa_salary_after_1.5_year", function(){
    pm.expect(resp_param).to.have.property( "qa_salary_after_1.5_year");
})
PASS
response_qa_salary_after_1.5_year


12. Проверить, что json response имеет параметр qa_salary_after_3.5_years
pm.test("response_qa_salary_after_3.5_years", function(){
    pm.expect(resp_param).to.have.property( "qa_salary_after_3.5_years");
})
PASS
response_qa_salary_after_3.5_years


13. Проверить, что json response имеет параметр person
pm.test("param_person", function(){
    pm.expect(resp_param).to.have.property("person");
})
PASS
param_person

14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)
pm.test("resp=req_salary_1", function(){
    pm.expect(resp_param.start_qa_salary).to.eql(+req.salary);
})
PASS
resp=req_salary_1


15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)
pm.test("resp=req_salary_2", function(){
    pm.expect(resp_param.qa_salary_after_6_months).to.eql(+req.salary*2);
})
PASS
resp=req_salary_2


16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)
pm.test("resp=req_salary_3", function(){
    pm.expect(resp_param.qa_salary_after_12_months).to.eql(+req.salary*2.7);
})
PASS
resp=req_salary_3


17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)
pm.test("resp=req_salary_4", function(){
    pm.expect(resp_param["qa_salary_after_1.5_year"]).to.eql(req.salary*3.3);
})
PASS
resp=req_salary_4

18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)
pm.test("resp=req_salary_5", function(){
    pm.expect(resp_param["qa_salary_after_3.5_years"]).to.eql(req.salary*3.8);
})
PASS
resp=req_salary_5


19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)
pm.test("resp=req_u_name_1", function(){
    pm.expect(resp_param.person.u_name[1]).to.eql(+req.salary);
}) 
PASS
resp=req_u_name_1

20. Проверить, что что параметр u_age равен age из request (age забрать из request.)
pm.test("resp=req_u_age", function(){
    pm.expect(resp_param.person.u_age).to.eql(+req.age);
})
PASS
resp=req_u_age

21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)
pm.test("resp=req_salary_6", function(){
    pm.expect(resp_param.person["u_salary_5_years"]).to.eql(req.salary*4.2);
})
PASS
resp=req_salary_6

22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.

for (var i of resp_param.person.u_name){
console.log(i);
}

inna
 
100000
 
30