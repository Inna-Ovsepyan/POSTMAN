{
	"info": {
		"_postman_id": "48fe0160-4eff-4417-9e8b-1e514025c7d1",
		"name": "PM_HW_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "EP_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// отправляем запрос, получаем токен.\r",
							"// login: inna\r",
							"// password: qwerty\r",
							"\r",
							"// добавляем токен в окружение.\r",
							"var jsonData = pm.response.json();\r",
							"var response_token= jsonData.token;\r",
							"console.log (\"TOKEN=\" + response_token);\r",
							"\r",
							"pm.environment.set(\"auth_token\", response_token);\r",
							"// url сразу добавляем в окружение, чтобы не вводить каждый раз.\r",
							"// Environments-> New-> HW_3-> заполняем форму->\r",
							"// variable= url     current value= http://162.55.220.72:5005->\r",
							"// save\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "inna",
							"type": "text"
						},
						{
							"key": "password",
							"value": "qwerty",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"var req = JSON.parse(request.data);\r",
							"\r",
							"// отправляем запрос POST->raw json\r",
							"// {\r",
							"//     \"age\": 30,\r",
							"//     \"salary\": 100000,\r",
							"//     \"name\":\"inna\",\r",
							"//     \"auth_token\":\"{{auth_token}}\"\r",
							"\r",
							"// }\r",
							"\r",
							"// 1) Статус код 200\r",
							"pm.test (\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// PASS\r",
							"// Status code is 200\r",
							"\r",
							"// Проверка структуры json в ответе.\r",
							"\r",
							"  const schema={\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]\r",
							"};\r",
							"pm.test(\"schema types verification\", function() {\r",
							"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
							"});\r",
							"tv4.validate(pm.response.json(), schema, true, true)\r",
							"// PASS\r",
							"// schema types verification\r",
							"\r",
							"pm.test(\"validate json\", function(){\r",
							"    pm.response.to.have.jsonSchema;\r",
							"});\r",
							"\r",
							"// PASS\r",
							"// validate json\r",
							"\r",
							"//  В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"pm.test(\"salary_check_1\", function(){\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(+req.salary*2.9);\r",
							"})\r",
							"\r",
							"// // PASS\r",
							"// // salary_check_\r",
							"pm.test(\"salary_check_2\", function(){\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(+req.salary*2);\r",
							"})\r",
							"// // PASS\r",
							"// // salary_check_2\r",
							"\r",
							"pm.test(\"salary_check_3\", function(){\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(req.salary);\r",
							"})\r",
							"// // PASS\r",
							"// // salary_check_3\r",
							"\r",
							"\r",
							"// // достаем значение \"u_salary_1_5_year\"\r",
							"// console.log(jsonData.person.u_salary_1_5_year);\r",
							"// // значение из консоли  \r",
							"// // 400000\r",
							"\r",
							"\r",
							"// // добавляем значение в окружение.\r",
							"// pm.environment.set(\"salary\", 400000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": 30,\r\n    \"salary\": 100000,\r\n    \"name\":\"inna\",\r\n    \"auth_token\":\"{{auth_token}}\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var req= request.data;\r",
							"var jsonData = pm.response.json();\r",
							"// отправляем запрос\r",
							"// POST->Body-> form-data\r",
							"// age 30\r",
							"// salary 100000\r",
							"// name inna\r",
							"// auth_token  {{auth_token}}\r",
							"// save->send\r",
							"\r",
							"// проверка статус кода 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// PASS\r",
							"// Status code is 200\r",
							"\r",
							"\r",
							"// проверка структуры Json в ответе.\r",
							"const schema = {\r",
							"\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"type\": \"integer\"\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"salary\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": [\r",
							"                {\r",
							"                    \"type\": \"integer\"\r",
							"                },\r",
							"                {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                    \"type\": \"string\"\r",
							"                }\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"name\",\r",
							"        \"salary\"\r",
							"    ]\r",
							"}\r",
							"pm.test(\"schema types verification\", function() {\r",
							"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
							"});\r",
							"tv4.validate(pm.response.json(), schema, true, true)\r",
							"// PASS\r",
							"// schema types verification\r",
							"\r",
							"pm.test(\"validate json\", function(){\r",
							"    pm.response.to.have.jsonSchema;\r",
							"});\r",
							"\r",
							"// PASS\r",
							"// validate json\r",
							"\r",
							"\r",
							"// в ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"pm.test(\"salary_check_1\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+req.salary);\r",
							"})\r",
							"// PASS\r",
							"// salary_check_1\r",
							"\r",
							"pm.test(\"salary_check_2\", function () {\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(req.salary * 2);\r",
							"})\r",
							"// PASS\r",
							"// salary_check_2\r",
							"\r",
							"pm.test(\"salary_check_3\", function () {\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(req.salary * 3);\r",
							"})\r",
							"// PASS\r",
							"// salary_check_3\r",
							"\r",
							"// проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"pm.test(\"element 2 > element 1\", function () {\r",
							"    pm.expect(+jsonData.salary[2]).to.be.above(+jsonData.salary[1]);\r",
							"})\r",
							"// PASS\r",
							"// element 2 > element 1\r",
							"\r",
							"pm.test(\"element 2 > element 0\", function () {\r",
							"    pm.expect(+jsonData.salary[2]).to.be.above(+jsonData.salary[0]);\r",
							"})\r",
							"// PASS\r",
							"// element 2 > element 0"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "100000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "inna",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData= pm.response.json();\r",
							"var req= request.data;\r",
							"// отправляем запрос\r",
							"// Post->body->form-data\r",
							"// age- 30\r",
							"// weight- 50\r",
							"// name- inna\r",
							"// auth_token- {{auth_token}}\r",
							"\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// PASS\r",
							"// Status code is 200\r",
							"\r",
							"// проверка структуры json в ответе.\r",
							"const schema={\r",
							" \r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"daily_food\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ]\r",
							"}\r",
							"pm.test(\"schema types verification\", function() {\r",
							"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
							"});\r",
							"tv4.validate(pm.response.json(), schema, true, true)\r",
							"// PASS\r",
							"// schema types verification\r",
							"\r",
							"\r",
							"pm.test(\"validate json\", function(){\r",
							"    pm.response.to.have.jsonSchema;\r",
							"})\r",
							"// PASS\r",
							"// validate json\r",
							"\r",
							"\r",
							"// В ответе указаны коэффициенты умножения weight, напишите тесты \r",
							"// по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"// console.log(jsonData.daily_food);\r",
							"\r",
							"pm.test(\"check_daily_food\", function(){\r",
							"    pm.expect(jsonData.daily_food).to.eql(req.weight*0.012);\r",
							"})\r",
							"// PASS\r",
							"// check_daily_food\r",
							"\r",
							"pm.test(\"check_daily_sleep\", function(){\r",
							"    pm.expect(jsonData.daily_sleep).to.eql(req.weight*2.5);\r",
							"})\r",
							"// PASS\r",
							"// check_daily_sleep"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "50",
							"type": "text"
						},
						{
							"key": "name",
							"value": "inna",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData= pm.response.json();\r",
							"var rec= request.data;\r",
							"// отправляем запрос\r",
							"// POST->body->from-data\r",
							"// age- 30\r",
							"// salary- {{salary}}\r",
							"// name- inna\r",
							"// auth_token- {{auth_token}}\r",
							"\r",
							"// статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// PASS\r",
							"// Status code is 200\r",
							"\r",
							"\r",
							"// проверкаа структуры json в ответе.\r",
							"\r",
							"const schema={\r",
							"  \r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"pm.test(\"schema types verification\", function() {\r",
							"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
							"});\r",
							"tv4.validate(pm.response.json(), schema, true, true)\r",
							"// PASS\r",
							"// schema types verification\r",
							"\r",
							"pm.test(\"validate json\", function(){\r",
							"    pm.response.to.have.jsonSchema;\r",
							"})\r",
							"// PASS\r",
							"// validate json\r",
							"\r",
							"// добавляем значение name в окружение:\r",
							"// Заходим в ранее созданное окружение HW_3, добавляем ключ \"name\"->\r",
							"pm.environment.set(\"name\", jsonData.name);\r",
							"\r",
							"// проверить что значение поля name = значению переменной name из окружения.\r",
							"pm.test(\"check_variable_name\", function(){\r",
							"    pm.expect(jsonData.name).to.eql(environment.name);\r",
							"})\r",
							"// PASS\r",
							"// check_variable_name\r",
							"\r",
							"// проверить что значение поля age в ответе соответсвует отправленному в запросе значению поля age.\r",
							"pm.test(\"check_value_age\", function(){\r",
							"    pm.expect(jsonData.age).to.eql(rec.age);\r",
							"})\r",
							"// PASS\r",
							"// check_value_age\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "inna",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData= pm.response.json();\r",
							"// отправляем запрос\r",
							"// POST->body->form-data\r",
							"// auth_token- {{auth_token}}\r",
							"\r",
							"\r",
							"// взять любой объект из присланного списка, используйте js random.\r",
							"var arr= jsonData;\r",
							"\r",
							"function getRandomInt(min, max) {\r",
							"\treturn Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"var key = getRandomInt(0, arr.length - 1);\r",
							"// console.log(key);\r",
							"// в консоле вывелось рандомное число 244\r",
							"\r",
							"// В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"\r",
							"console.log(jsonData[244]);\r",
							"// {Cur_Abbreviation: \"PLN\", Cur_ID: 452, Cur_Name: \"Злотый\"}ША\"}\r",
							"\r",
							"pm.environment.set(\"Cur_ID\", \"452\");\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_7",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData= pm.response.json();\r",
							"\r",
							"// отправляем запрос\r",
							"// POST->body->form-data\r",
							"// auth_token- {{auth_token}}\r",
							"// curr_code- {{Cur_ID}}\r",
							"\r",
							"\r",
							"// статус-код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// PASS\r",
							"// Status code is 200\r",
							"\r",
							"// проверка структуры ответа json.\r",
							"const schema={\r",
							"\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"Cur_Abbreviation\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_ID\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Cur_Name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_OfficialRate\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"Cur_Scale\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Date\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"Cur_Abbreviation\",\r",
							"    \"Cur_ID\",\r",
							"    \"Cur_Name\",\r",
							"    \"Cur_OfficialRate\",\r",
							"    \"Cur_Scale\",\r",
							"    \"Date\"\r",
							"  ]\r",
							"}\r",
							"pm.test(\"schema types verification\", function() {\r",
							"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
							"});\r",
							"tv4.validate(pm.response.json(), schema, true, true)\r",
							"// PASS\r",
							"// schema types verification\r",
							"\r",
							"pm.test(\"validate json\", function(){\r",
							"    pm.response.to.have.jsonSchema;\r",
							"})\r",
							"\r",
							"// PASS\r",
							"// validate json\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "auth_token",
						"value": "{{auth_token}}",
						"type": "text"
					},
					{
						"key": "curr_code",
						"value": "{{Cur_ID}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						},
						{
							"key": "",
							"value": "",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/curr_byn",
					"host": [
						"{{url}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_8",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData= pm.response.json();\r",
							"\r",
							"// // // получить список валют.\r",
							"for(var i = 0; i < jsonData.length; i++) {\r",
							"  console.log(\"cycle_cur\", jsonData[i]);\r",
							"    request(data[i]);\r",
							"};\r",
							"\r",
							" function request(data){\r",
							"        xmlhttp = new XMLHttpRequest();\r",
							"        xmlhttp.open(\"POST\", \"/service.ashx\", true);\r",
							"\r",
							"        xmlhttp.onreadystatechange = function () {\r",
							"            if (xmlhttp.readyState != 4) return;\r",
							"            clearTimeout(timeout);\r",
							"            if (xmlhttp.status == 200) {\r",
							"                // вызов колбека например\r",
							"            } else {\r",
							"                handleError(xmlhttp.statusText)\r",
							"            };\r",
							"        };\r",
							"        xmlhttp.send(data); // Тут ваши данные запроса\r",
							"        var timeout = setTimeout(function () {\r",
							"            xmlhttp.abort();\r",
							"            handleError(\"Time over\")\r",
							"        }, 10000);\r",
							"    };"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		}
	]
}